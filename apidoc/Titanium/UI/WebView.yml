---
name: Titanium.UI.WebView
summary: The Web View allows you to open an HTML5 based view which can load either local or remote content. The content can be any valid web content such as HTML, PDF, SVG or other WebKit supported content types. The Web View is created by the method <Titanium.UI.createWebView>.
extends: Titanium.UI.View
since: "0.8"
methods:
  - name: setHtml
    summary: Sets the value of [html](Titanium.UI.WebView.html) property.
    description: |
      In iOS, there are additional parameters `baseURL` and `mimeType` that can be used to configure
      the WebView main content presentation. For example:
              
              setHtml('<html><body>Hello,<a href="/documentation">Titanium</a>!</body></html>',{baseURL:'http://developer.appcelerator.com/'})
    parameters:
      - name: html
        summary: New value for the property
        type: Object
      - name: baseURL
        summary: The base URL for the content
        optional: true
        type: String
      - name: mimeType
        summary: The MIME type of the content (default is `text/html`)
        optional: true
        type: String
  - name: canGoBack
    summary: returns true if the webview can go back in history
    description: |
        For Mobile Web, returns true if `url` is set.
    returns:
        type: Boolean
  - name: canGoForward
    summary: returns true if the webview can go forward in history
    description: |
        For Mobile Web, returns true if `url` is set.
    returns:
        type: Boolean
  - name: evalJS
    summary: invoke JavaScript inside the context of the webview and optionally, return a result
    description: |
        For Mobile Web, you can only execute JavaScript when the contents are on the same domain.
    returns:
        type: String
    parameters:
      - name: content
        summary: JavaScript code as a string. The code will be evaluated inside the webview context.
        type: String
  - name: goBack
    summary: go back one entry in history to the previous page
    description: |
        For Mobile Web, you can only go back for same domain pages. If you set the initial `url` to a remote page, the back function will not work.
        If you load a local page, then the user navigates away to a remote page, you cannot go back.
  - name: goForward
    summary: go forward one entry in history to the page before the current page
    description: |
        For Mobile Web, you can only go forward for same domain pages. If you set the initial `url` to a remote page, the forward function will not work.
  - name: reload
    summary: reload the current webpage
    description: |
        For Mobile Web, when you reload, the last visited same domain page or the original `url` is the page that is reloaded.
        You may need to simply reset the `url` property to reinitialize the WebView's iframe. Reloading the WebView will reset
        the history.
  - name: repaint
    summary: force the webview to repaint its contents
    platforms: [iphone, ipad]
  - name: setBasicAuthentication
    summary: set the basic authentication for the webview instance to be used on subsequent url requests
    platforms: [android, iphone, ipad]
    parameters:
      - name: username
        summary: the username
        type: String
      - name: password
        summary: the password
        type: String
  - name: stopLoading
    summary: stop loading a currently loading page
    description: |
        For Mobile Web, due to browser permissions, this will issue a stop on all windows including the parent and all other WebViews.
        Generally, this feature does not work reliably and instead you may choose to set the `hardStop` argument to true.
    parameters:
      - name: hardStop
        summary: Forces the WebView to destroy the iframe (Mobile Web only)
        type: Boolean
events:
  - name: beforeload
    summary: fired before the webview starts loading its content
    description: |
        For Mobile Web, if you pass the `url` into the constructor, you must attach the event listener before
        adding the WebView to its parent, otherwise the event will fire before you have a chance to add the event
        listener.
        
        This event does not fire when navigating remote web pages.
    properties:
      - name: url
        summary: the url of the web document
      - name: y
        summary: the y point of the event, in receiving view coordinates
        platforms: [iphone, ipad, android]
      - name: x
        summary: the x point of the event in receiving view coordiantes
        platforms: [iphone, ipad, android]
      - name: globalPoint
        summary: a dictionary with properties x and y describing the point of the event in screen coordinates
        platforms: [iphone, ipad]
        deprecated:
            since: "1.8.0"
  - name: error
    summary: Fired when the webview cannot load the content. For Mobile Web, generally this event will NOT fire, even for 404, 500, and invalid URLs.
    properties:
      - name: url
        summary: the url of the web document
      - name: y
        summary: the y point of the event, in receiving view coordinates
        platforms: [iphone, ipad, android]
      - name: x
        summary: the x point of the event in receiving view coordiantes
        platforms: [iphone, ipad, android]
      - name: message
        summary: the error message
      - name: globalPoint
        summary: a dictionary with properties x and y describing the point of the event in screen coordinates
        platforms: [iphone, ipad]
        deprecated:
            since: "1.8.0"
  - name: load
    summary: fired when the webview is loaded
    properties:
      - name: url
        summary: The url of the web document. For Mobile Web, this `url` is generally accurate when loading same domain pages and remote pages that you explicitly set using the `url` property. If you navigate a remote page, then this `url` is set to the initial remote page's URL.
      - name: y
        summary: the y point of the event, in receiving view coordinates
        platforms: [iphone, ipad, android]
      - name: x
        summary: the x point of the event in receiving view coordiantes
        platforms: [iphone, ipad, android]
      - name: globalPoint
        summary: a dictionary with properties x and y describing the point of the event in screen coordinates
        platforms: [iphone, ipad]
        deprecated:
            since: "1.8.0"
  - name: pause
    summary: Pause native webview plugins. Add a `pause` handler to your <Titanium.UI.Android.Activity> and invoke
        this method to pause native plugins. This is important with Flash content as it will continue in the background
        unless this method is invoked.
    since: "1.8.0"
    platforms: [android]
  - name: resume
    summary: Resume native webview plugins. Add a `resume` handler to your <Titanium.UI.Android.Activity> and invoke
        this method to resume native plugins.
    since: "1.8.0"
    platforms: [android]
properties:
  - name: data
    summary: a data blob or file that is used to load the web document
    description: |
        For Mobile Web, setting new content will reset the `url` and the WebView's history.
    type: Object
  - name: html
    summary: the html content of the web document
    description: |
        For Mobile Web, setting new content will reset the `url` and the WebView's history.
    type: String
  - name: loading
    summary: boolean indicating if the webview is loading content
    type: Boolean
  - name: pluginState
    summary: set how plugins are processed. Accepts one of <Titanium.UI.Android.WEBVIEW_PLUGINS_OFF>, <Titanium.UI.Android.WEBVIEW_PLUGINS_ON>, or <Titanium.UI.Android.WEBVIEW_PLUGINS_ON_DEMAND>.
        See Android documentation for [WebSettings.PluginState](http://developer.android.com/reference/android/webkit/WebSettings.PluginState.html). Only
        works on Android devices at API Level 8 or greater.
    type: Number
    platforms: [android]
    since: "1.8.0"
    default: <Titanium.UI.Android.WEBVIEW_PLUGINS_OFF>
  - name: showScrollbars
    summary: If true, scrollbars will be displayed should the content be larger than the WebView.
    type: Boolean
    platforms: [mobileweb]
    since: "1.9.0"
    default: true
  - name: enableZoomControls
    summary: sets whether the zoom controls are enabled
    type: Boolean
    platforms: [android]
    since: "1.8.0"
    default: true
  - name: scalesPageToFit
    summary: whether the webview should scale it's contents or not
    platforms: [android, iphone, ipad]
    type: Boolean
  - name: url
    summary: the url to the web document. this property will change as the content of the webview changes (such as from internal hyperlinks, etc)
    type: String
  - name: willHandleTouches
    summary: Explicitly specifies if this webview handles touches.
    description: |
        On the IOS platform, the webview will intercept `all` touch events if this webview or any of its parent views have touch listeners. This makes interaction with native webview components impossible.
        Set this flag to `false` to disable the default behavior. Setting this property to `false` will allow the user to interact with the native webview and still honor any `touch` events sent to its parents. 
        No `touch` events will be generated when the user interacts with the webview itself.
    type: Boolean
    platforms: [iphone, ipad]
    since: "1.9.0"
    default: true
description: |
    Creating webviews are more expensive than creating pure native views because of the requirement to
    load the HTML browser into memory.
    
    Since a webview internally wants to handle its own events, scrolling and other related touch events against it's own view surface, you cannot have both Titanium style events against the webview instance and internal Javascript events in the DOM.  You must choose between one or the other.
examples:
  - title: Basic Web View to external URL example
    example: |
        Create a web view to a remote URL and open the window as modal.
        
            	var webview = Titanium.UI.createWebView({url:'http://www.appcelerator.com'});
            	var window = Titanium.UI.createWindow();
            	window.add(webview);
            	window.open({modal:true});
        
        
